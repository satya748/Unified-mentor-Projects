# -*- coding: utf-8 -*-
"""American Sign Language Detection project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QZkgX4fFl2TkL_Y-cUPTmCK9ngSHLs_5
"""

# STEP 1: Upload archive.zip
from google.colab import files
uploaded = files.upload()  # Upload 'archive.zip'

# STEP 2: Unzip it into /content/
import zipfile
import os

zip_name = next(iter(uploaded))  # Automatically get uploaded filename
with zipfile.ZipFile(zip_name, 'r') as zip_ref:
    zip_ref.extractall("/content/")

# Confirm structure
print("Main folders:", os.listdir("/content"))

# The train folder path (adjust only if needed)
train_path = "/content/asl_alphabet_train/asl_alphabet_train"

# List first few folders (classes)
print("ASL classes found:", os.listdir(train_path)[:15])

from tensorflow.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # 80% train, 20% validation
)

train_data = datagen.flow_from_directory(
    train_path,
    target_size=(64, 64),
    batch_size=64,
    class_mode='categorical',
    subset='training'
)

val_data = datagen.flow_from_directory(
    train_path,
    target_size=(64, 64),
    batch_size=64,
    class_mode='categorical',
    subset='validation'
)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import os # Import os if not already imported in this cell
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# The train folder path (adjust only if needed) - Ensure this path exists and contains subdirectories for each class
train_path = "/content/asl_alphabet_train/asl_alphabet_train"

# List first few folders (classes) - This helps verify the subdirectories exist
print("ASL classes found:", os.listdir(train_path)[:15])

datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # 80% train, 20% validation
)

train_data = datagen.flow_from_directory(
    train_path,
    target_size=(64, 64),
    batch_size=64,
    class_mode='categorical', # Ensure this is 'categorical' for one-hot encoding
    subset='training'
)

val_data = datagen.flow_from_directory(
    train_path,
    target_size=(64, 64),
    batch_size=64,
    class_mode='categorical', # Ensure this is 'categorical' for one-hot encoding
    subset='validation'
)

# Add this check to see how many classes were found by the generator
print(f"Number of classes detected by train_data generator: {train_data.num_classes}")

# If the number of classes detected is not 29, check the directory structure.
# Each class (A, B, C, ..., Z, space, delete, nothing) should be a separate
# subdirectory within '/content/asl_alphabet_train'.

# If the number of classes IS 29, the 'categorical' class_mode should produce
# (None, 29) shaped targets. The error suggests this isn't happening.
# Re-running the cells with the correct class_mode should fix it.
# No code change is needed if class_mode is already 'categorical'.
# The original error might have been a transient issue or a result of
# running cells out of order without the correct class_mode set previously.

# --- Add the model building and training code here ---

# Define the number of classes based on the generator
num_classes = train_data.num_classes

# Build a simple CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(num_classes, activation='softmax') # Output layer with num_classes units
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy', # Use categorical crossentropy for categorical labels
              metrics=['accuracy'])

# Train the model and store the history
epochs = 10 # Define the number of epochs
history = model.fit(
    train_data,
    steps_per_epoch=train_data.samples // train_data.batch_size,
    epochs=epochs,
    validation_data=val_data,
    validation_steps=val_data.samples // val_data.batch_size
)

# --- End of added code ---

model.save("asl_model.h5")
print("Model saved as asl_model.h5")

from tensorflow.keras.preprocessing import image
import numpy as np

# Upload any image to test
uploaded = files.upload()
img_path = next(iter(uploaded))

img = image.load_img(img_path, target_size=(64, 64))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Predict
pred = model.predict(img_array)
labels = list(train_data.class_indices.keys())
print("Predicted ASL Sign:", labels[np.argmax(pred)])